<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="#shu6Aak$~a~^;K3ypLJ">choice</variable><variable id="QmKBI(3zOG~qBYVl@xS|">quiet</variable></variables><block type="pxt-on-start" id="n=C{*6wZV6GTjP[PnRBl" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="4MYAXp,NZOrv8q/sI6A^" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let ave = 0" numlines="1" declaredvars="ave"></mutation><next><block type="typescript_statement" id="#|K1s`PkpvO;-S@e;`Y," editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let pitch = 0" numlines="1" declaredvars="pitch"></mutation><next><block type="typescript_statement" id="D/`=Jv35?8iy:Q%Wo9s{" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let span = 0" numlines="1" declaredvars="span"></mutation><next><block type="typescript_statement" id="dz*/8S.]_b(^+W,z;7wV" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum VoxType {" line1="    //% block=&quot;Tweet&quot;" line2="    TWEET," line3="    //% block=&quot;Laugh&quot;" line4="    LAUGH," line5="    //% block=&quot;Snore&quot;" line6="    SNORE," line7="    //% block=&quot;Doo&quot;" line8="    DOO," line9="    //% block=&quot;Eh?&quot;" line10="    QUERY," line11="    //% block=&quot;Uh-oh&quot;" line12="    UHOH," line13="    //% block=&quot;Moan&quot;" line14="    MOAN," line15="    //% block=&quot;Duh!&quot;" line16="    DUH," line17="    //% block=&quot;Waah&quot;" line18="    WAAH," line19="    //% block=&quot;Growl&quot;" line20="    GROWL" line21="}" numlines="22"></mutation><next><block type="typescript_statement" id="O4$3|%A$9NYfWDY!{;ep" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace Vocalise {" line1="    enum PartUse {" line2="        UNUSED = 0," line3="        PLAYED = 1," line4="        SILENT = 2" line5="    }" line6="    // provide activity events (for other components to synchronise with)" line7="    const VOCALISE_ACTIVITY_ID = 1234 // TODO: Check this a is permissable value!" line8="    enum Action {" line9="        START = 1," line10="        FINISH = 2" line11="    }" line12="" line13="    // Code this defensively, just in case SoundExpression field-locations should change in future." line14="    // (We presume their values will never exceed 4 digits)" line15="    const startVolPos = 1" line16="    const startFreqPos = 5" line17="    const durationPos = 9" line18="    const endVolPos = 26" line19="    const endFreqPos = 18" line20="" line21="" line22="    //====================================================================" line23="    class Utterance {" line24="        // properties" line25="        myType: VoxType;" line26="        partA: soundExpression.Sound;" line27="        partB: soundExpression.Sound;" line28="        partC: soundExpression.Sound;" line29="        useOfA: PartUse;" line30="        useOfB: PartUse;" line31="        useOfC: PartUse;" line32="        // Each part has a start and an end [frequency,volume], but endA===startB " line33="        // and endB===startC, so an utterance moves through four [frequency,volume] points" line34="        // These are set up to be fixed ratios of the performance [frequency,volume]" line35="        // " line36="        freqRatio0: number;" line37="        freqRatio1: number;" line38="        freqRatio2: number;" line39="        freqRatio3: number;" line40="        volRatio0: number;" line41="        volRatio1: number;" line42="        volRatio2: number;" line43="        volRatio3: number;" line44="        // Proportions of time allocated to each part" line45="        timeRatio1: number;" line46="        timeRatio2: number;" line47="        timeRatio3: number;" line48="" line49="        constructor(me: VoxType) {" line50="            this.myType = me;" line51="            // until otherwise instructed..." line52="            this.useOfA = PartUse.UNUSED;" line53="            this.useOfB = PartUse.UNUSED;" line54="            this.useOfC = PartUse.UNUSED;" line55="        }" line56="" line57="        // methods...  " line58="" line59="        // TODO: CHECK VOLUME RATIO CALCS!" line60="        // Sets up Part A, implicitly setting start values for Part B" line61="        usePartA(freq0: number, vol0: number, wave: WaveShape, fx: SoundExpressionEffect, shape: InterpolationCurve, freq1: number, vol1: number, ms1: number) {" line62="            this.freqRatio0 = freq0;" line63="            this.volRatio0 = vol0;" line64="            this.freqRatio1 = freq1;" line65="            this.volRatio1 = vol1;" line66="            this.timeRatio1 = ms1;" line67="            this.partA = new soundExpression.Sound;" line68="            this.partA.src = music.createSoundEffect(wave, 333, 333, 666, 666, 999, fx, shape);" line69="            this.useOfA = PartUse.PLAYED" line70="        }" line71="        // Adds an optional Part B, implicitly setting start values for Part C" line72="        usePartB(wave: WaveShape, fx: SoundExpressionEffect, shape: InterpolationCurve, freq2: number, vol2: number, ms2: number) {" line73="            // we have a PartB..." line74="            this.freqRatio2 = freq2;" line75="            this.volRatio2 = vol2;" line76="            this.timeRatio2 = ms2;" line77="            this.partB = new soundExpression.Sound;" line78="            this.partB.src = music.createSoundEffect(wave, 333, 333, 666, 666, 999, fx, shape);" line79="            this.useOfB = PartUse.PLAYED" line80="        }" line81="        // Adds a silent Part B, but still sets the start values for Part C" line82="        silentPartB(freq2: number, vol2: number, ms2: number) {" line83="            this.freqRatio2 = freq2;" line84="            this.volRatio2 = vol2;" line85="            this.timeRatio2 = ms2;" line86="            this.useOfB = PartUse.SILENT" line87="        }" line88="        // Adds an optional part C," line89="        usePartC(wave: WaveShape, fx: SoundExpressionEffect, shape: InterpolationCurve, freq3: number, vol3: number, ms3: number) {" line90="            // we have a PartC as well..." line91="            this.freqRatio3 = freq3;" line92="            this.volRatio3 = vol3;" line93="            this.timeRatio3 = ms3;" line94="            this.partC = new soundExpression.Sound;" line95="            this.partC.src = music.createSoundEffect(wave, 333, 333, 666, 666, 999, fx, shape);" line96="            this.useOfC = PartUse.PLAYED" line97="        }" line98="" line99="        performUsing(freq: number, vol: number, ms: number) {" line100="            let loudness = vol * 4 // map from [0...255] into range [0...1023]" line101="            // adjust PartA duration, frequencies and volumes " line102="            this.partA.src = this.insert(this.partA.src, durationPos, this.formatNumber(ms * this.timeRatio1, 4));" line103="            this.partA.src = this.insert(this.partA.src, startFreqPos, this.formatNumber(freq * this.freqRatio0, 4));" line104="            this.partA.src = this.insert(this.partA.src, startVolPos, this.formatNumber(loudness * this.volRatio0, 4));" line105="            let nextFreqStr = this.formatNumber(freq * this.freqRatio1, 4);" line106="            let nextVolStr = this.formatNumber(loudness * this.volRatio1, 4);" line107="            this.partA.src = this.insert(this.partA.src, endFreqPos, nextFreqStr);" line108="            this.partA.src = this.insert(this.partA.src, endVolPos, nextVolStr);" line109="" line110="            if (this.useOfB == PartUse.PLAYED) {" line111="                // adjust PartB duration, frequencies and volumes" line112="                this.partB.src = this.insert(this.partB.src, durationPos, this.formatNumber(ms * this.timeRatio2, 4));" line113="                this.partB.src = this.insert(this.partB.src, startFreqPos, nextFreqStr);" line114="                this.partB.src = this.insert(this.partB.src, startVolPos, nextVolStr);" line115="                nextFreqStr = this.formatNumber(freq * this.freqRatio2, 4);" line116="                nextVolStr = this.formatNumber(loudness * this.volRatio2, 4);" line117="                this.partB.src = this.insert(this.partB.src, endFreqPos, nextFreqStr);" line118="                this.partB.src = this.insert(this.partB.src, endVolPos, nextVolStr);" line119="            }" line120="            if (this.useOfC == PartUse.PLAYED) {" line121="                // adjust PartC duration, frequencies and volumes" line122="                this.partC.src = this.insert(this.partC.src, durationPos, this.formatNumber(ms * this.timeRatio3, 4));" line123="                this.partC.src = this.insert(this.partC.src, startFreqPos, nextFreqStr);" line124="                this.partC.src = this.insert(this.partC.src, startVolPos, nextVolStr);" line125="                this.partC.src = this.insert(this.partC.src, endFreqPos, this.formatNumber(freq * this.freqRatio3, 4));" line126="                this.partC.src = this.insert(this.partC.src, endVolPos, this.formatNumber(loudness * this.volRatio3, 4));" line127="" line128="            }" line129="" line130="            // now for the actual performance..." line131="            control.raiseEvent(VOCALISE_ACTIVITY_ID, Action.START) // ..typically, to open mouth" line132="            music.playSoundEffect(this.partA.src, SoundExpressionPlayMode.UntilDone);" line133="            if (this.useOfB == PartUse.PLAYED) {" line134="                music.playSoundEffect(this.partB.src, SoundExpressionPlayMode.UntilDone);" line135="            }" line136="            if (this.useOfB == PartUse.SILENT) {" line137="                basic.pause(ms * this.timeRatio2)" line138="            }" line139="            if (this.useOfC == PartUse.PLAYED) {" line140="                music.playSoundEffect(this.partC.src, SoundExpressionPlayMode.UntilDone);" line141="            }" line142="            control.raiseEvent(VOCALISE_ACTIVITY_ID, Action.FINISH) // ..typically, to close mouth" line143="        }" line144="        // internal tools..." line145="        protected formatNumber(num: number, length: number) {" line146="            let result = Math.constrain(num | 0, 0, Math.pow(10, length) - 1) + &quot;&quot;;" line147="            while (result.length &lt; length) result = &quot;0&quot; + result;" line148="            return result;" line149="        }" line150="        protected insert(expression: string, offset: number, digits: string): string {" line151="            return expression.substr(0, offset) + digits + expression.substr(offset + digits.length);" line152="        }" line153="" line154="    }" line155="" line156="" line157="    // now create a selection of standard utterances" line158="    const utterances = [" line159="        new Utterance(VoxType.TWEET)," line160="        new Utterance(VoxType.LAUGH)," line161="        new Utterance(VoxType.SNORE)," line162="        new Utterance(VoxType.DOO)," line163="        new Utterance(VoxType.QUERY)," line164="        new Utterance(VoxType.UHOH)," line165="        new Utterance(VoxType.MOAN)," line166="        new Utterance(VoxType.DUH)," line167="        new Utterance(VoxType.WAAH)," line168="        new Utterance(VoxType.GROWL)" line169="    ]" line170="" line171="    /*" line172="       Short-hand definitions are laid out as follows:" line173="       &lt;name&gt;             &lt;%Freq,%vol&gt;          at start of PartA" line174="       &lt;PartA wave-style&gt; &lt;%Freq,%vol,%time&gt;    at end of PartA &amp; start of PartB" line175="       &lt;PartB wave-style&gt; &lt;%Freq,%vol,%time&gt;    at end of PartB &amp; start of PartC" line176="       &lt;PartC wave-style&gt; &lt;%Freq,%vol,%time&gt;    at end of PartC" line177="       */" line178="    /*" line179="    TWEET         80% 45%" line180="    SIN NONE LOG 100% 80% 90%" line181="    SILENT                10%" line182="    */" line183="    utterances[VoxType.TWEET].usePartA(0.8, 0.45, WaveShape.Sine, SoundExpressionEffect.None, InterpolationCurve.Logarithmic, 1.00, 0.8, 0.9);" line184="    utterances[VoxType.TWEET].silentPartB(0.0, 0, 0.1)" line185="" line186="    /*" line187="    LAUGH         70%  40%" line188="    SAW NONE LOG 100% 100% 90%" line189="    SQU NONE LIN  70%  75% 10%" line190="    */" line191="    utterances[VoxType.LAUGH].usePartA(0.70, 0.4, WaveShape.Sawtooth, SoundExpressionEffect.None, InterpolationCurve.Logarithmic, 1.00, 1.0, 0.9)" line192="    utterances[VoxType.LAUGH].usePartB(WaveShape.Square, SoundExpressionEffect.None, InterpolationCurve.Linear, 0.7, 0.75, 0.1);" line193="" line194="    /*" line195="    SNORE       3508  10%" line196="    NOI VIB LIN  715 100% 50%" line197="    NOI VIB LIN 5008   0% 50%" line198="    NOTE: The noise-generator is highly sensitive to the chosen frequency-trajectory, and these strange values have been experimentally derived." line199="    By always invoking Snore.performUsing() with the scaling-factor freq=1, these literal frequencies will get used verbatim!" line200="    */" line201="    utterances[VoxType.SNORE].usePartA(3508, 0.1, WaveShape.Noise, SoundExpressionEffect.Vibrato, InterpolationCurve.Linear, 715, 1.0, 0.50)" line202="    utterances[VoxType.SNORE].usePartB(WaveShape.Noise, SoundExpressionEffect.Vibrato, InterpolationCurve.Linear, 5008, 0, 0.50);" line203="" line204="    /*" line205="    DOO          300% 80%" line206="    SAW NONE LOG 100% 90%  5%" line207="    SQU NONE LIN 100% 70% 95%" line208="    */" line209="    utterances[VoxType.DOO].usePartA(3.00, 0.8, WaveShape.Sawtooth, SoundExpressionEffect.None, InterpolationCurve.Logarithmic, 1.00, 0.9, 0.05)" line210="    utterances[VoxType.DOO].usePartB(WaveShape.Square, SoundExpressionEffect.None, InterpolationCurve.Linear, 1.00, 0.7, 0.95);" line211="" line212="    /*" line213="    QUERY        110%  20%" line214="    SQU NONE LIN 100% 100% 20%" line215="    SQU NONE CUR 150%  20% 80%" line216="    */" line217="    utterances[VoxType.QUERY].usePartA(1.10, 0.2, WaveShape.Square, SoundExpressionEffect.None, InterpolationCurve.Linear, 1.00, 1.0, 0.2)" line218="    utterances[VoxType.QUERY].usePartB(WaveShape.Square, SoundExpressionEffect.None, InterpolationCurve.Curve, 1.50, 0.2, 0.8);" line219="" line220="    /*" line221="    UHOH         110%  40%" line222="    SAW NONE LOG 140% 100% 25%" line223="    SILENT       110% 100% 20%" line224="    SQU NONE LIN 100%  75% 55%" line225="    */" line226="    utterances[VoxType.UHOH].usePartA(1.10, 0.4, WaveShape.Sawtooth, SoundExpressionEffect.None, InterpolationCurve.Logarithmic, 1.40, 1.0, 0.25)" line227="    utterances[VoxType.UHOH].silentPartB(1.10, 1.0, 0.2)" line228="    utterances[VoxType.UHOH].usePartC(WaveShape.Square, SoundExpressionEffect.None, InterpolationCurve.Linear, 1.00, 0.75, 0.55);" line229="" line230="    /*" line231="    MOAN         130%  60%" line232="    TRI NONE CUR 100% 100% 30%" line233="    TRI NONE CUR  95%  80% 60%" line234="    TRI NONE LIN 115%  55% 10%" line235="    */" line236="    utterances[VoxType.MOAN].usePartA(1.30, 0.6, WaveShape.Triangle, SoundExpressionEffect.None, InterpolationCurve.Curve, 1.00, 1.0, 0.3)" line237="    utterances[VoxType.MOAN].usePartB(WaveShape.Triangle, SoundExpressionEffect.None, InterpolationCurve.Curve, 0.95, 0.8, 0.6)" line238="    utterances[VoxType.MOAN].usePartC(WaveShape.Triangle, SoundExpressionEffect.None, InterpolationCurve.Linear, 1.15, 0.55, 0.1);" line239="" line240="    /*" line241="    DUH          100%  60%" line242="    SQU NONE LIN  95%  80% 10%" line243="    SQU NONE LIN 110% 100% 30%" line244="    SQU NONE LIN  66%  40% 60%" line245="    */" line246="    utterances[VoxType.DUH].usePartA(1.00, 0.6, WaveShape.Square, SoundExpressionEffect.None, InterpolationCurve.Linear, 0.95, 0.8, 0.1)" line247="    utterances[VoxType.DUH].usePartB(WaveShape.Square, SoundExpressionEffect.None, InterpolationCurve.Linear, 1.10, 1.0, 0.3)" line248="    utterances[VoxType.DUH].usePartC(WaveShape.Square, SoundExpressionEffect.None, InterpolationCurve.Linear, 0.66, 0.4, 0.6);" line249="" line250="    /*" line251="    WAAH         100% 10%" line252="    SAW NONE CUR 140% 90% 20%" line253="    SAW NONE LIN 110% 20% 70%" line254="    SAW NONE LIN  30%  5% 10%" line255="    */" line256="    utterances[VoxType.WAAH].usePartA(1.00, 0.1, WaveShape.Sawtooth, SoundExpressionEffect.None, InterpolationCurve.Curve, 1.40, 0.9, 0.20)" line257="    utterances[VoxType.WAAH].usePartB(WaveShape.Sawtooth, SoundExpressionEffect.None, InterpolationCurve.Linear, 1.10, 0.2, 0.70)" line258="    utterances[VoxType.WAAH].usePartC(WaveShape.Sawtooth, SoundExpressionEffect.None, InterpolationCurve.Linear, 0.3, 0.05, 0.10);" line259="" line260="    /*" line261="    GROWL         30%  50%" line262="    SAW NONE LOG 100%  80% 15%" line263="    SAW NONE LIN  90% 100% 60%" line264="    SAW NONE LIN  30%  75% 15%" line265="    */" line266="    utterances[VoxType.GROWL].usePartA(0.30, 0.5, WaveShape.Sawtooth, SoundExpressionEffect.None, InterpolationCurve.Logarithmic, 1.00, 0.8, 0.15)" line267="    utterances[VoxType.GROWL].usePartB(WaveShape.Sawtooth, SoundExpressionEffect.None, InterpolationCurve.Linear, 0.90, 1.0, 0.60)" line268="    utterances[VoxType.GROWL].usePartC(WaveShape.Sawtooth, SoundExpressionEffect.None, InterpolationCurve.Linear, 0.30, 0.75, 0.15);" line269="" line270="" line271="    //% block=&quot;emit $utterance at pitch $pitch with strength $strength for $duration ms&quot;" line272="    //% inlineInputMode=inline  " line273="    //% advanced=true " line274="    //% pitch.min=100 pitch.max=800 pitch.defl=300" line275="    //% strength.min=0 strength.max=255 strength.defl=180" line276="    //% duration.min=50 duration.max=9999 duration.defl=1000" line277="    export function emit(utterance: VoxType, pitch: number, strength: number, duration: number) {" line278="        utterances[utterance].performUsing(pitch, strength, duration);" line279="    }" line280="" line281="    //% block=&quot;hum || $repeat times with strength $strength over $duration ms&quot;" line282="    //% repeat.min=1 repeat.max=100 repeat.defl=10" line283="    //% strength.min=0 strength.max=255 strength.defl=180" line284="    //% duration.min=1 duration.max= 100 duration.defl=2000" line285="    export function hum(repeat: number = 10, strength: number = 180, duration: number = 2000) {" line286="        quiet = false" line287="        ave = duration / repeat" line288="        pitch = randint(200, 350)" line289="        let skip = true" line290="        for (let index = 0; index &lt; repeat; index++) {" line291="            span = randint(0.2 * ave, 1.8 * ave)" line292="            if ((span &gt; 0.6 * ave) || (skip)) {" line293="                // mostly &quot;Dum&quot;..." line294="                emit(VoxType.DOO, randint(150, 300), strength, span)" line295="                basic.pause(100)" line296="                skip = false" line297="            } else {" line298="                // .. with occasional short, higher-pitched &quot;Di&quot;" line299="                emit(VoxType.DOO, randint(350, 500), strength, 0.25 * ave)" line300="                basic.pause(50)" line301="                skip = true" line302="            }" line303="        }" line304="        quiet = true" line305="    }" line306="" line307="    //% block=&quot;grumble || $repeat times with strength $strength over $duration ms&quot;" line308="    //% repeat.min=1 repeat.max=100 repeat.defl=5" line309="    //% strength.min=0 strength.max=255 strength.defl=250" line310="    //% duration.min=1 duration.max= 100 duration.defl=3000" line311="    export function grumble(repeat: number = 5, strength: number = 250, duration: number = 3000) {" line312="        quiet = false" line313="        ave = duration / repeat" line314="        basic.showIcon(IconNames.Sad)" line315="        for (let index2 = 0; index2 &lt; repeat; index2++) {" line316="            span = randint(0.4 * ave, 1.8 * ave)" line317="            if (span &gt; 1.0 * ave) {" line318="                emit(VoxType.DUH, randint(150, 300), strength, 0.5 * span)" line319="            } else {" line320="                emit(VoxType.UHOH, randint(100, 200), strength, 2 * span)" line321="            }" line322="            pause(0.5 * span)" line323="        }" line324="        quiet = true" line325="    }" line326="" line327="    //% block=&quot;giggle || $repeat times with strength $strength over $duration ms&quot;" line328="    //% repeat.min=1 repeat.max=100 repeat.defl=12" line329="    //% strength.min=0 strength.max=255 strength.defl=200" line330="    //% duration.min=1 duration.max= 100 duration.defl=4000" line331="    export function giggle(repeat: number = 12, strength: number = 200, duration: number = 2000) {" line332="        quiet = false" line333="        ave = duration / repeat" line334="        pitch = randint(500, 700)" line335="        for (let index3 = 0; index3 &lt; repeat; index3++) {" line336="            span = randint(0.4 * ave, 1.8 * ave)" line337="            emit(VoxType.LAUGH, pitch, strength, span)" line338="            pitch = 0.9 * pitch" line339="            basic.pause(100)" line340="        }" line341="        quiet = true" line342="    }" line343="" line344="    //% block=&quot;whistle || $repeat times with strength $strength over $duration ms&quot;" line345="    //% repeat.min=1 repeat.max=100 repeat.defl=8" line346="    //% strength.min=0 strength.max=255 strength.defl=180" line347="    //% duration.min=1 duration.max= 100 duration.defl=2500" line348="    export function whistle(repeat: number = 8, strength: number = 180, duration: number = 2500) {" line349="        quiet = false" line350="        ave = duration / repeat" line351="        for (let index4 = 0; index4 &lt; repeat; index4++) {" line352="            span = randint(0.4 * ave, 1.8 * ave)" line353="            emit(VoxType.TWEET, randint(600, 1200), strength, span)" line354="            basic.pause(100)" line355="        }" line356="        quiet = true" line357="    }" line358="" line359="    //% block=&quot;snore || $repeat times with strength $strength over $duration ms&quot;" line360="    //% repeat.min=1 repeat.max=100 repeat.defl=8" line361="    //% strength.min=0 strength.max=255 strength.defl=150" line362="    //% duration.min=1 duration.max= 100 duration.defl=5000" line363="    export function snore(repeat: number = 8, strength: number = 150, duration: number = 5000) {" line364="        quiet = false" line365="        ave = duration / repeat" line366="        for (let index5 = 0; index5 &lt; repeat; index5++) {" line367="            span = randint(0.9 * ave, 1.1 * ave)" line368="            emit(VoxType.SNORE, 1, 80, 0.3 * span);" line369="            pause(300);" line370="            emit(VoxType.SNORE, 1, 150, 0.7 * span);" line371="            pause(500);" line372="        }" line373="        quiet = true" line374="    }" line375="" line376="    //% block=&quot;whimper || $repeat times with strength $strength over $duration ms&quot;" line377="    //% repeat.min=1 repeat.max=100 repeat.defl=10" line378="    //% strength.min=0 strength.max=255 strength.defl=100" line379="    //% duration.min=1 duration.max= 100 duration.defl=4000" line380="    export function whimper(repeat: number = 10, strength: number = 100, duration: number = 4000) {" line381="        if (quiet) {" line382="            quiet = false" line383="            ave = duration / repeat" line384="            for (let index6 = 0; index6 &lt; repeat; index6++) {" line385="                emit(VoxType.MOAN, randint(250, 400), strength, randint(0.7 * ave, 1.3 * ave))" line386="                basic.pause(300)" line387="            }" line388="            quiet = true" line389="        }" line390="    }" line391="" line392="    //% block=&quot;cry || $repeat times with strength $strength over $duration ms&quot;" line393="    //% repeat.min=1 repeat.max=100 repeat.defl=8" line394="    //% strength.min=0 strength.max=255 strength.defl=200" line395="    //% duration.min=1 duration.max= 100 duration.defl=3000" line396="    export function cry(repeat: number = 8, strength: number = 200, duration: number = 3500) {" line397="        if (quiet) {" line398="            quiet = false" line399="            ave = duration / repeat" line400="            for (let index7 = 0; index7 &lt; repeat; index7++) {" line401="                span = randint(0.6 * ave, 1.5 * ave)" line402="                if (span &gt; 0.9 * ave) {" line403="                    emit(VoxType.MOAN, randint(200, 350), 1.5 * strength, 0.5 * span)" line404="                } else {" line405="                    emit(VoxType.WAAH, randint(250, 400), 0.05 * strength, 1.3 * span)" line406="                }" line407="                basic.pause(200)" line408="            }" line409="            quiet = true" line410="        }" line411="    }" line412="" line413="    //% block=&quot;shout || $repeat times with strength $strength over $duration ms&quot;" line414="    //% expandableArgumentMode=&quot;toggle&quot;" line415="    //% repeat.min=1 repeat.max=100 repeat.defl=5" line416="    //% strength.min=0 strength.max=255 strength.defl=250" line417="    //% duration.min=1 duration.max= 100 duration.defl=2500" line418="    export function shout(repeat: number = 5, strength: number = 250, duration: number = 2500) {" line419="        if (quiet) {" line420="            quiet = false" line421="            ave = duration / repeat" line422="            for (let index8 = 0; index8 &lt; repeat; index8++) {" line423="                emit(VoxType.GROWL, randint(320, 400), strength, randint(0.8 * ave, 1.2 * ave))" line424="                basic.pause(300)" line425="            }" line426="            quiet = true" line427="        }" line428="" line429="    }" line430="}" numlines="431"></mutation><next><block type="variables_set" id="wD*6%T/BxMIY^;8-7Q.,"><field name="VAR" id="QmKBI(3zOG~qBYVl@xS|">quiet</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="logic_boolean" id="jHXiyr2`o]iU^?mOD)M@"><field name="BOOL">TRUE</field></block></value><next><block type="variables_set" id="7z#7NJUN{ev{oYr_ePe3"><field name="VAR" id="#shu6Aak$~a~^;K3ypLJ">choice</field><value name="VALUE"><shadow type="math_number" id="Yjl?:duCT%LEY/BFrK]h"><field name="NUM">7</field></shadow></value><next><block type="music_set_built_in_speaker_enable" id="XvK2~@amt#3nUbWKmgLe"><value name="enabled"><shadow type="toggleOnOff" id="T085q2wE%GQ{CC6mVpxG"><field name="on">false</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="device_button_event" id="fhvMqXTJo5[Y3h-}TF/4" x="20" y="18569"><field name="NAME">Button.A</field><statement name="HANDLER"><block type="variables_set" id="a;Ycf$O-LvWgi~R],3n("><field name="VAR" id="#shu6Aak$~a~^;K3ypLJ">choice</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="math_modulo" id="qY*R(R9;j5Mezzd0e4qT"><value name="DIVIDEND"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="typescript_expression" id="o4v^}_t=T98|?%5_Hu1u" editable="false"><field name="EXPRESSION">(++choice)</field></block></value><value name="DIVISOR"><shadow type="math_number" id="WFTbAK7e/UYy`ciOB2e$"><field name="NUM">8</field></shadow></value></block></value><next><block type="device_show_number" id="fsI+gm=5l(`?yi,QzRk`"><value name="number"><block type="math_arithmetic" id="MvIO}4iNX%2WrJ@nNB6*"><field name="OP">ADD</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="0E|W.~C[4t%90i4h.x@!"><field name="VAR" id="#shu6Aak$~a~^;K3ypLJ">choice</field></block></value><value name="B"><shadow type="math_number" id="Y9RN$VIOXmuIMo-59;CK"><field name="NUM">1</field></shadow></value></block></value></block></next></block></statement></block><block type="device_button_event" id="Hj]Hzn%4KjL%}zs%n[Kt" x="564" y="18569"><field name="NAME">Button.B</field><statement name="HANDLER"><block type="function_call" id="yE)e~3+~Ps.78x3hZB*@"><mutation name="doSound" functionid="oQy@,EXn3.eO`+|KdG`^"><arg name="choice" id="1n6xlnqb8233cm88ji2j" type="number"></arg></mutation><value name="1n6xlnqb8233cm88ji2j"><shadow type="math_number"><field name="NUM">1</field></shadow><block type="math_arithmetic" id="g0i[nWQ0.F:@0(=De[jq"><field name="OP">ADD</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="y)1y-d4l`L;z#|QU4.jU"><field name="VAR" id="#shu6Aak$~a~^;K3ypLJ">choice</field></block></value><value name="B"><shadow type="math_number" id="2?a[Ox`d8Z6V?f)v`D1j"><field name="NUM">1</field></shadow></value></block></value></block></statement></block><block type="function_definition" id="Xy]!1M,hIW8I`fQgQY4M" x="20" y="18806"><mutation name="doSound" functionid="oQy@,EXn3.eO`+|KdG`^"><arg name="choice" id="1n6xlnqb8233cm88ji2j" type="number"></arg></mutation><field name="function_name">doSound</field><value name="1n6xlnqb8233cm88ji2j"><shadow type="argument_reporter_number" id="]hbX_G~u*4M(=P+9Wg9;"><field name="VALUE">choice</field></shadow></value><statement name="STACK"><block type="typescript_statement" id="i$6T$KfN^iUJ[v^!su81" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="switch (choice) {" line1="        case 1: Vocalise.shout();" line2="            break;" line3="        case 2: Vocalise.cry();" line4="            break;" line5="        case 3: Vocalise.whimper();" line6="            break;" line7="        case 4: Vocalise.snore();" line8="            break;" line9="        case 5: Vocalise.whistle();" line10="            break;" line11="        case 6: Vocalise.giggle();" line12="            break;" line13="        case 7: Vocalise.grumble();" line14="            break;" line15="        case 8: Vocalise.hum()" line16="    }" numlines="17"></mutation><next><block type="device_pause" id="Vcy6q`(sdifc%Yn5-]5I"><value name="pause"><shadow type="timePicker" id="B#%5Z{hqn6IxyLc.}:LL"><field name="ms">1000</field></shadow></value></block></next></block></statement></block></xml>